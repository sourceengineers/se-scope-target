/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_SC_SE_SCOPE_PB_H_INCLUDED
#define PB_SC_SE_SCOPE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SC_Var_Type {
    SC_Var_Type_SE_UINT8 = 0,
    SC_Var_Type_SE_UINT16 = 1,
    SC_Var_Type_SE_UINT32 = 2,
    SC_Var_Type_SE_FLOAT = 3
} SC_Var_Type;

typedef enum _SC_Trigger_Mode {
    SC_Trigger_Mode_NORMAL = 0,
    SC_Trigger_Mode_CONTINUOUS = 1,
    SC_Trigger_Mode_ONE_SHOT = 2
} SC_Trigger_Mode;

/* Struct definitions */
typedef struct _SC_Channel {
    pb_callback_t data;
    bool has_id;
    uint32_t id;
} SC_Channel;

typedef struct _SC_Trigger {
    bool has_cl_id;
    uint32_t cl_id;
    bool has_cl_data_ind;
    uint32_t cl_data_ind;
    bool has_mode;
    SC_Trigger_Mode mode;
} SC_Trigger;

typedef struct _SC_Data {
    pb_callback_t channels;
    pb_callback_t timestamps;
    bool has_t_inc;
    uint32_t t_inc;
    bool has_trigger;
    SC_Trigger trigger;
} SC_Data;


/* Helper constants for enums */
#define _SC_Var_Type_MIN SC_Var_Type_SE_UINT8
#define _SC_Var_Type_MAX SC_Var_Type_SE_FLOAT
#define _SC_Var_Type_ARRAYSIZE ((SC_Var_Type)(SC_Var_Type_SE_FLOAT+1))

#define _SC_Trigger_Mode_MIN SC_Trigger_Mode_NORMAL
#define _SC_Trigger_Mode_MAX SC_Trigger_Mode_ONE_SHOT
#define _SC_Trigger_Mode_ARRAYSIZE ((SC_Trigger_Mode)(SC_Trigger_Mode_ONE_SHOT+1))


/* Initializer values for message structs */
#define SC_Trigger_init_default                  {false, 0, false, 0, false, _SC_Trigger_Mode_MIN}
#define SC_Channel_init_default                  {{{NULL}, NULL}, false, 0}
#define SC_Data_init_default                     {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, SC_Trigger_init_default}
#define SC_Trigger_init_zero                     {false, 0, false, 0, false, _SC_Trigger_Mode_MIN}
#define SC_Channel_init_zero                     {{{NULL}, NULL}, false, 0}
#define SC_Data_init_zero                        {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, SC_Trigger_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define SC_Channel_data_tag                      1
#define SC_Channel_id_tag                        2
#define SC_Trigger_cl_id_tag                     1
#define SC_Trigger_cl_data_ind_tag               2
#define SC_Trigger_mode_tag                      3
#define SC_Data_channels_tag                     1
#define SC_Data_timestamps_tag                   2
#define SC_Data_t_inc_tag                        3
#define SC_Data_trigger_tag                      4

/* Struct field encoding specification for nanopb */
#define SC_Trigger_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, UINT32, cl_id, 1) \
X(a, STATIC, OPTIONAL, UINT32, cl_data_ind, 2) \
X(a, STATIC, OPTIONAL, UENUM, mode, 3)
#define SC_Trigger_CALLBACK NULL
#define SC_Trigger_DEFAULT NULL

#define SC_Channel_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, FLOAT, data, 1) \
X(a, STATIC, OPTIONAL, UINT32, id, 2)
#define SC_Channel_CALLBACK pb_default_field_callback
#define SC_Channel_DEFAULT NULL

#define SC_Data_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE, channels, 1) \
X(a, CALLBACK, REPEATED, UINT32, timestamps, 2) \
X(a, STATIC, OPTIONAL, UINT32, t_inc, 3) \
X(a, STATIC, OPTIONAL, MESSAGE, trigger, 4)
#define SC_Data_CALLBACK pb_default_field_callback
#define SC_Data_DEFAULT NULL
#define SC_Data_channels_MSGTYPE SC_Channel
#define SC_Data_trigger_MSGTYPE SC_Trigger

extern const pb_msgdesc_t SC_Trigger_msg;
extern const pb_msgdesc_t SC_Channel_msg;
extern const pb_msgdesc_t SC_Data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SC_Trigger_fields &SC_Trigger_msg
#define SC_Channel_fields &SC_Channel_msg
#define SC_Data_fields &SC_Data_msg

/* Maximum encoded size of messages (where known) */
#define SC_Trigger_size                          14
/* SC_Channel_size depends on runtime parameters */
/* SC_Data_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
