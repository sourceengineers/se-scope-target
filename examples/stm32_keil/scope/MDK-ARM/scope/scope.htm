<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [scope\scope.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image scope\scope.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Dec 18 13:43:55 2018
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; receive &rArr; Scope_command &rArr; CommandFactory_getICommand &rArr; CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[193]">msgpack_pack_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[193]">msgpack_pack_object</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[35]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[be]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a9]">activateNewMessage</a> from msgpackunpacker.o(i.activateNewMessage) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[80]">checkPresentInProtocol</a> from ethernetvalidator.o(i.checkPresentInProtocol) referenced from ethernetvalidator.o(i.EthernetValidator_create)
 <LI><a href="#[ba]">checkPresentInProtocol</a> from uartvalidator.o(i.checkPresentInProtocol) referenced from uartvalidator.o(i.UartValidator_create)
 <LI><a href="#[66]">closeStream</a> from byteringbuffer.o(i.closeStream) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[8b]">closeStream</a> from floatringbuffer.o(i.closeStream) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[94]">closeStream</a> from intringbuffer.o(i.closeStream) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[81]">createCheck</a> from ethernetvalidator.o(i.createCheck) referenced from ethernetvalidator.o(i.EthernetValidator_create)
 <LI><a href="#[bb]">createCheck</a> from uartvalidator.o(i.createCheck) referenced from uartvalidator.o(i.UartValidator_create)
 <LI><a href="#[60]">dataIsReady</a> from byteringbuffer.o(i.dataIsReady) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[85]">dataIsReady</a> from floatringbuffer.o(i.dataIsReady) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[8e]">dataIsReady</a> from intringbuffer.o(i.dataIsReady) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[c0]">decr_count</a> from unpack.o(i.decr_count) referenced from unpack.o(i.msgpack_unpacker_flush_zone)
 <LI><a href="#[67]">flush</a> from byteringbuffer.o(i.flush) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[8c]">flush</a> from floatringbuffer.o(i.flush) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[95]">flush</a> from intringbuffer.o(i.flush) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[a1]">getBoolFromCommand</a> from msgpackunpacker.o(i.getBoolFromCommand) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[9d]">getByteStream</a> from msgpackpacker.o(i.getByteStream) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[ad]">getBytesToCheck</a> from msgpackunpacker.o(i.getBytesToCheck) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[ac]">getCheck</a> from msgpackunpacker.o(i.getCheck) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[82]">getCheckLength</a> from ethernetvalidator.o(i.getCheckLength) referenced from ethernetvalidator.o(i.EthernetValidator_create)
 <LI><a href="#[bc]">getCheckLength</a> from uartvalidator.o(i.getCheckLength) referenced from uartvalidator.o(i.UartValidator_create)
 <LI><a href="#[6a]">getCommandName</a> from commandaddr.o(i.getCommandName) referenced from commandaddr.o(i.CommandAddr_create)
 <LI><a href="#[6d]">getCommandName</a> from commandannounce.o(i.getCommandName) referenced from commandannounce.o(i.CommandAnnounce_create)
 <LI><a href="#[70]">getCommandName</a> from commandclear.o(i.getCommandName) referenced from commandclear.o(i.CommandClear_create)
 <LI><a href="#[73]">getCommandName</a> from commandpoll.o(i.getCommandName) referenced from commandpoll.o(i.CommandPoll_create)
 <LI><a href="#[76]">getCommandName</a> from commandrunning.o(i.getCommandName) referenced from commandrunning.o(i.CommandRunning_create)
 <LI><a href="#[79]">getCommandName</a> from commandtinc.o(i.getCommandName) referenced from commandtinc.o(i.CommandTInc_create)
 <LI><a href="#[7c]">getCommandName</a> from commandtrans.o(i.getCommandName) referenced from commandtrans.o(i.CommandTrans_create)
 <LI><a href="#[7f]">getCommandName</a> from commandtrigger.o(i.getCommandName) referenced from commandtrigger.o(i.CommandTrigger_create)
 <LI><a href="#[a2]">getFloatFromCommand</a> from msgpackunpacker.o(i.getFloatFromCommand) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a3]">getIntFromCommand</a> from msgpackunpacker.o(i.getIntFromCommand) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[aa]">getLengthOfBytesToCheck</a> from msgpackunpacker.o(i.getLengthOfBytesToCheck) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[ab]">getLengthOfCheck</a> from msgpackunpacker.o(i.getLengthOfCheck) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a5]">getNameOfCommand</a> from msgpackunpacker.o(i.getNameOfCommand) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a8]">getNameOfField</a> from msgpackunpacker.o(i.getNameOfField) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a6]">getNumberOfCommands</a> from msgpackunpacker.o(i.getNumberOfCommands) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a7]">getNumberOfFields</a> from msgpackunpacker.o(i.getNumberOfFields) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[a4]">getStringFromCommand</a> from msgpackunpacker.o(i.getStringFromCommand) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[b2]">getTimeIncrement</a> from scope.o(i.getTimeIncrement) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b3]">getTimestamp</a> from scope.o(i.getTimestamp) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b5]">iScopeAnnounce</a> from scope.o(i.iScopeAnnounce) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b6]">iScopeClear</a> from scope.o(i.iScopeClear) referenced from scope.o(i.Scope_create)
 <LI><a href="#[af]">iScopePoll</a> from scope.o(i.iScopePoll) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b1]">iScopeSetTimeIncrement</a> from scope.o(i.iScopeSetTimeIncrement) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b0]">iScopeTransmit</a> from scope.o(i.iScopeTransmit) referenced from scope.o(i.Scope_create)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9f]">msgpack_sbuffer_write</a> from msgpackpacker.o(i.msgpack_sbuffer_write) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[ae]">msgpack_sbuffer_write</a> from msgpackunpacker.o(i.msgpack_sbuffer_write) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[5f]">openStream</a> from byteringbuffer.o(i.openStream) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[84]">openStream</a> from floatringbuffer.o(i.openStream) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[8d]">openStream</a> from intringbuffer.o(i.openStream) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[96]">packData</a> from msgpackpacker.o(i.packData) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[9e]">prepareAddressAnnouncement</a> from msgpackpacker.o(i.prepareAddressAnnouncement) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[98]">prepareChannel</a> from msgpackpacker.o(i.prepareChannel) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[99]">prepareFlowControl</a> from msgpackpacker.o(i.prepareFlowControl) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[9a]">prepareTimeIncrement</a> from msgpackpacker.o(i.prepareTimeIncrement) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[9b]">prepareTimestamp</a> from msgpackpacker.o(i.prepareTimestamp) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[9c]">prepareTrigger</a> from msgpackpacker.o(i.prepareTrigger) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[bf]">printHandle</a> from main.o(i.printHandle) referenced from main.o(i.main)
 <LI><a href="#[63]">readAll</a> from byteringbuffer.o(i.readAll) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[88]">readAll</a> from floatringbuffer.o(i.readAll) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[91]">readAll</a> from intringbuffer.o(i.readAll) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[61]">readData</a> from byteringbuffer.o(i.readData) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[86]">readData</a> from floatringbuffer.o(i.readData) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[8f]">readData</a> from intringbuffer.o(i.readData) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[97]">reset</a> from msgpackpacker.o(i.reset) referenced from msgpackpacker.o(i.MsgpackPacker_create)
 <LI><a href="#[68]">run</a> from commandaddr.o(i.run) referenced from commandaddr.o(i.CommandAddr_create)
 <LI><a href="#[6b]">run</a> from commandannounce.o(i.run) referenced from commandannounce.o(i.CommandAnnounce_create)
 <LI><a href="#[6e]">run</a> from commandclear.o(i.run) referenced from commandclear.o(i.CommandClear_create)
 <LI><a href="#[71]">run</a> from commandpoll.o(i.run) referenced from commandpoll.o(i.CommandPoll_create)
 <LI><a href="#[74]">run</a> from commandrunning.o(i.run) referenced from commandrunning.o(i.CommandRunning_create)
 <LI><a href="#[77]">run</a> from commandtinc.o(i.run) referenced from commandtinc.o(i.CommandTInc_create)
 <LI><a href="#[7a]">run</a> from commandtrans.o(i.run) referenced from commandtrans.o(i.CommandTrans_create)
 <LI><a href="#[7d]">run</a> from commandtrigger.o(i.run) referenced from commandtrigger.o(i.CommandTrigger_create)
 <LI><a href="#[69]">setCommandAttribute</a> from commandaddr.o(i.setCommandAttribute) referenced from commandaddr.o(i.CommandAddr_create)
 <LI><a href="#[6c]">setCommandAttribute</a> from commandannounce.o(i.setCommandAttribute) referenced from commandannounce.o(i.CommandAnnounce_create)
 <LI><a href="#[6f]">setCommandAttribute</a> from commandclear.o(i.setCommandAttribute) referenced from commandclear.o(i.CommandClear_create)
 <LI><a href="#[72]">setCommandAttribute</a> from commandpoll.o(i.setCommandAttribute) referenced from commandpoll.o(i.CommandPoll_create)
 <LI><a href="#[75]">setCommandAttribute</a> from commandrunning.o(i.setCommandAttribute) referenced from commandrunning.o(i.CommandRunning_create)
 <LI><a href="#[78]">setCommandAttribute</a> from commandtinc.o(i.setCommandAttribute) referenced from commandtinc.o(i.CommandTInc_create)
 <LI><a href="#[7b]">setCommandAttribute</a> from commandtrans.o(i.setCommandAttribute) referenced from commandtrans.o(i.CommandTrans_create)
 <LI><a href="#[7e]">setCommandAttribute</a> from commandtrigger.o(i.setCommandAttribute) referenced from commandtrigger.o(i.CommandTrigger_create)
 <LI><a href="#[62]">streamLength</a> from byteringbuffer.o(i.streamLength) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[87]">streamLength</a> from floatringbuffer.o(i.streamLength) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[90]">streamLength</a> from intringbuffer.o(i.streamLength) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[b4]">transmitTimestampInc</a> from scope.o(i.transmitTimestampInc) referenced from scope.o(i.Scope_create)
 <LI><a href="#[b7]">triggerContinuous</a> from trigger.o(i.triggerContinuous) referenced from trigger.o(i.Trigger_create)
 <LI><a href="#[b8]">triggerNormal</a> from trigger.o(i.triggerNormal) referenced from trigger.o(i.Trigger_create)
 <LI><a href="#[b9]">triggerOneShot</a> from trigger.o(i.triggerOneShot) referenced from trigger.o(i.Trigger_create)
 <LI><a href="#[a0]">unpack</a> from msgpackunpacker.o(i.unpack) referenced from msgpackunpacker.o(i.MsgpackUnpacker_create)
 <LI><a href="#[83]">validateCheck</a> from ethernetvalidator.o(i.validateCheck) referenced from ethernetvalidator.o(i.EthernetValidator_create)
 <LI><a href="#[bd]">validateCheck</a> from uartvalidator.o(i.validateCheck) referenced from uartvalidator.o(i.UartValidator_create)
 <LI><a href="#[65]">writeAll</a> from byteringbuffer.o(i.writeAll) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[8a]">writeAll</a> from floatringbuffer.o(i.writeAll) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[93]">writeAll</a> from intringbuffer.o(i.writeAll) referenced from intringbuffer.o(i.IntRingBuffer_create)
 <LI><a href="#[64]">writeData</a> from byteringbuffer.o(i.writeData) referenced from byteringbuffer.o(i.ByteRingBuffer_create)
 <LI><a href="#[89]">writeData</a> from floatringbuffer.o(i.writeData) referenced from floatringbuffer.o(i.FloatRingBuffer_create)
 <LI><a href="#[92]">writeData</a> from intringbuffer.o(i.writeData) referenced from intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1bf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[191]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_sbuffer_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_sbuffer_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_configure
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messageSeemsValid
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfField
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfCommand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBoolFromCommand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayObject
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateNewMessage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_configure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCommandAttribute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_create
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_data
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackUnpacker_create
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacked_destroy
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[df]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_setAnnounceAddress
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
</UL>

<P><STRONG><a name="[de]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_setAnnounceAddress
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareFlowControl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFlowControl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
</UL>

<P><STRONG><a name="[10b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
</UL>

<P><STRONG><a name="[11b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messageSeemsValid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_configure
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseStringToDataType
</UL>

<P><STRONG><a name="[c9]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_configure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_configure
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1cc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1cd]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[db]"></a>AddressStorage_create</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, addressstorage.o(i.AddressStorage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AddressStorage_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[16b]"></a>AddressStorage_getAddressToTransmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, addressstorage.o(i.AddressStorage_getAddressToTransmit))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_addressAnnouncement
</UL>

<P><STRONG><a name="[16a]"></a>AddressStorage_getMaxAmountOfAddresses</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, addressstorage.o(i.AddressStorage_getMaxAmountOfAddresses))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_addressAnnouncement
</UL>

<P><STRONG><a name="[dd]"></a>AddressStorage_setAnnounceAddress</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, addressstorage.o(i.AddressStorage_setAnnounceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddressStorage_setAnnounceAddress &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_setAnnounceAddresses
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>ByteRingBuffer_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, byteringbuffer.o(i.ByteRingBuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ByteRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_create
</UL>

<P><STRONG><a name="[e1]"></a>ByteRingBuffer_freeData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, byteringbuffer.o(i.ByteRingBuffer_freeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_usedData
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_write
</UL>

<P><STRONG><a name="[e7]"></a>ByteRingBuffer_getIByteStream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, byteringbuffer.o(i.ByteRingBuffer_getIByteStream))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_getIByteStream
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_create
</UL>

<P><STRONG><a name="[e3]"></a>ByteRingBuffer_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, byteringbuffer.o(i.ByteRingBuffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ByteRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_usedData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAll
</UL>

<P><STRONG><a name="[e2]"></a>ByteRingBuffer_usedData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, byteringbuffer.o(i.ByteRingBuffer_usedData))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_freeData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamLength
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataIsReady
</UL>

<P><STRONG><a name="[e5]"></a>ByteRingBuffer_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, byteringbuffer.o(i.ByteRingBuffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ByteRingBuffer_write &rArr; ByteRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_freeData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAll
</UL>

<P><STRONG><a name="[e6]"></a>ByteStream_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bytestream.o(i.ByteStream_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ByteStream_create &rArr; ByteRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_getIByteStream
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[e9]"></a>ByteStream_getIByteStream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytestream.o(i.ByteStream_getIByteStream))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_getIByteStream
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_getInputStream
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[15c]"></a>ByteStream_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytestream.o(i.ByteStream_length))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
</UL>

<P><STRONG><a name="[ea]"></a>Channel_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, channel.o(i.Channel_clear))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_clear
</UL>

<P><STRONG><a name="[ec]"></a>Channel_create</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, channel.o(i.Channel_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Channel_create &rArr; FloatStream_create &rArr; FloatRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_getIFloatStream
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[ef]"></a>Channel_getRingBufferFloatStream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, channel.o(i.Channel_getRingBufferFloatStream))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_getIFloatStream
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>

<P><STRONG><a name="[11a]"></a>Channel_getTriggerDataStream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, channel.o(i.Channel_getTriggerDataStream))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_configure
</UL>

<P><STRONG><a name="[16c]"></a>Channel_isRunning</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, channel.o(i.Channel_isRunning))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>

<P><STRONG><a name="[f1]"></a>Channel_poll</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, channel.o(i.Channel_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Channel_poll &rArr; FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_poll
</UL>

<P><STRONG><a name="[1b6]"></a>Channel_setPollAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, channel.o(i.Channel_setPollAddress))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[1b7]"></a>Channel_setStateRunning</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, channel.o(i.Channel_setStateRunning))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[1b8]"></a>Channel_setStateStopped</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, channel.o(i.Channel_setStateStopped))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[f3]"></a>CommandAddrParser_configure</STRONG> (Thumb, 190 bytes, Stack size 152 bytes, commandaddrparser.o(i.CommandAddrParser_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseStringToDataType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[f6]"></a>CommandAddrParser_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commandaddrparser.o(i.CommandAddrParser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandAddrParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[f7]"></a>CommandAddr_create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, commandaddr.o(i.CommandAddr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CommandAddr_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[100]"></a>CommandAddr_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandaddr.o(i.CommandAddr_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[10d]"></a>CommandAddr_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandaddr.o(i.CommandAddr_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[f8]"></a>CommandAnnounce_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commandannounce.o(i.CommandAnnounce_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandAnnounce_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[118]"></a>CommandAnnounce_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandannounce.o(i.CommandAnnounce_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[111]"></a>CommandAnnounce_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandannounce.o(i.CommandAnnounce_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[f9]"></a>CommandClear_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commandclear.o(i.CommandClear_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandClear_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[119]"></a>CommandClear_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandclear.o(i.CommandClear_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[112]"></a>CommandClear_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandclear.o(i.CommandClear_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[fa]"></a>CommandFactory_create</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, commandfactory.o(i.CommandFactory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CommandFactory_create &rArr; CommandTriggerParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrigger_getICommand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrigger_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrans_create
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTInc_getICommand
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTInc_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTIncParser_create
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunning_getICommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunning_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPoll_getICommand
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPoll_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPollParser_create
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandClear_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAnnounce_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddr_getICommand
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddr_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[109]"></a>CommandFactory_getICommand</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, commandfactory.o(i.CommandFactory_getICommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CommandFactory_getICommand &rArr; CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrigger_getName
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrigger_getICommand
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_configure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrans_getName
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrans_getICommand
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTInc_getName
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTInc_getICommand
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTIncParser_configure
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunning_getName
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunning_getICommand
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPoll_getName
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPoll_getICommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPollParser_configure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandClear_getName
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandClear_getICommand
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAnnounce_getName
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAnnounce_getICommand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddr_getName
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddr_getICommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_configure
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
</UL>

<P><STRONG><a name="[114]"></a>CommandPollParser_configure</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, commandpollparser.o(i.CommandPollParser_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommandPollParser_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[108]"></a>CommandPollParser_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commandpollparser.o(i.CommandPollParser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandPollParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[fc]"></a>CommandPoll_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, commandpoll.o(i.CommandPoll_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandPoll_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[107]"></a>CommandPoll_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandpoll.o(i.CommandPoll_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[10c]"></a>CommandPoll_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandpoll.o(i.CommandPoll_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[113]"></a>CommandRunningParser_configure</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, commandrunningparser.o(i.CommandRunningParser_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CommandRunningParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[102]"></a>CommandRunningParser_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commandrunningparser.o(i.CommandRunningParser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandRunningParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[fb]"></a>CommandRunning_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commandrunning.o(i.CommandRunning_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandRunning_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[101]"></a>CommandRunning_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandrunning.o(i.CommandRunning_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[10a]"></a>CommandRunning_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandrunning.o(i.CommandRunning_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[115]"></a>CommandTIncParser_configure</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, commandtincparser.o(i.CommandTIncParser_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommandTIncParser_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[104]"></a>CommandTIncParser_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, commandtincparser.o(i.CommandTIncParser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommandTIncParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[fd]"></a>CommandTInc_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, commandtinc.o(i.CommandTInc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandTInc_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[103]"></a>CommandTInc_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandtinc.o(i.CommandTInc_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[10e]"></a>CommandTInc_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtinc.o(i.CommandTInc_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[fe]"></a>CommandTrans_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commandtrans.o(i.CommandTrans_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandTrans_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[116]"></a>CommandTrans_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandtrans.o(i.CommandTrans_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[10f]"></a>CommandTrans_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtrans.o(i.CommandTrans_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[117]"></a>CommandTriggerParser_configure</STRONG> (Thumb, 250 bytes, Stack size 184 bytes, commandtriggerparser.o(i.CommandTriggerParser_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CommandTriggerParser_configure &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_getTriggerDataStream
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[106]"></a>CommandTriggerParser_create</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, commandtriggerparser.o(i.CommandTriggerParser_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CommandTriggerParser_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[ff]"></a>CommandTrigger_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commandtrigger.o(i.CommandTrigger_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommandTrigger_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[105]"></a>CommandTrigger_getICommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandtrigger.o(i.CommandTrigger_getICommand))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
</UL>

<P><STRONG><a name="[110]"></a>CommandTrigger_getName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtrigger.o(i.CommandTrigger_getName))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
</UL>

<P><STRONG><a name="[11c]"></a>CommunicationFactory_create</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, communicationfactory.o(i.CommunicationFactory_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CommunicationFactory_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[11d]"></a>CommunicationFactory_getIComValidator</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, communicationfactory.o(i.CommunicationFactory_getIComValidator))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommunicationFactory_getIComValidator &rArr; UartValidator_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartValidator_getIComValidator
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartValidator_create
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetValidator_getIComValidator
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetValidator_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>EthernetValidator_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ethernetvalidator.o(i.EthernetValidator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EthernetValidator_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_getIComValidator
</UL>

<P><STRONG><a name="[11f]"></a>EthernetValidator_getIComValidator</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernetvalidator.o(i.EthernetValidator_getIComValidator))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_getIComValidator
</UL>

<P><STRONG><a name="[eb]"></a>FloatRingBuffer_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, floatringbuffer.o(i.FloatRingBuffer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_clear
</UL>

<P><STRONG><a name="[122]"></a>FloatRingBuffer_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, floatringbuffer.o(i.FloatRingBuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FloatRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_create
</UL>

<P><STRONG><a name="[123]"></a>FloatRingBuffer_freeData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, floatringbuffer.o(i.FloatRingBuffer_freeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_usedData
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_write
</UL>

<P><STRONG><a name="[f0]"></a>FloatRingBuffer_getIFloatStream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, floatringbuffer.o(i.FloatRingBuffer_getIFloatStream))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_getRingBufferFloatStream
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_getIFloatStream
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_create
</UL>

<P><STRONG><a name="[125]"></a>FloatRingBuffer_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, floatringbuffer.o(i.FloatRingBuffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FloatRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_usedData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAll
</UL>

<P><STRONG><a name="[124]"></a>FloatRingBuffer_usedData</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, floatringbuffer.o(i.FloatRingBuffer_usedData))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_freeData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamLength
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataIsReady
</UL>

<P><STRONG><a name="[f2]"></a>FloatRingBuffer_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, floatringbuffer.o(i.FloatRingBuffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_freeData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_poll
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAll
</UL>

<P><STRONG><a name="[ed]"></a>FloatStream_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, floatstream.o(i.FloatStream_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FloatStream_create &rArr; FloatRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_getIFloatStream
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_create
</UL>

<P><STRONG><a name="[ee]"></a>FloatStream_getIFloatStream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, floatstream.o(i.FloatStream_getIFloatStream))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_getIFloatStream
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_create
</UL>

<P><STRONG><a name="[127]"></a>HAL_GPIO_Init</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[170]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[152]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[132]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1666 bytes, Stack size 48 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[136]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[172]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[174]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[175]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[138]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1594 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13c]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13b]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_UART_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_Receive</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive
</UL>

<P><STRONG><a name="[144]"></a>HAL_UART_Transmit</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHandle
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>IntRingBuffer_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, intringbuffer.o(i.IntRingBuffer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_clear
</UL>

<P><STRONG><a name="[145]"></a>IntRingBuffer_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, intringbuffer.o(i.IntRingBuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IntRingBuffer_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[146]"></a>IntRingBuffer_freeData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intringbuffer.o(i.IntRingBuffer_freeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_usedData
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_write
</UL>

<P><STRONG><a name="[18d]"></a>IntRingBuffer_getIntStream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intringbuffer.o(i.IntRingBuffer_getIntStream))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimestamp
</UL>

<P><STRONG><a name="[148]"></a>IntRingBuffer_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, intringbuffer.o(i.IntRingBuffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IntRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_usedData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAll
</UL>

<P><STRONG><a name="[147]"></a>IntRingBuffer_usedData</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, intringbuffer.o(i.IntRingBuffer_usedData))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_freeData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamLength
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataIsReady
</UL>

<P><STRONG><a name="[14a]"></a>IntRingBuffer_write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, intringbuffer.o(i.IntRingBuffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IntRingBuffer_write &rArr; IntRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_freeData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_poll
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAll
</UL>

<P><STRONG><a name="[14b]"></a>MX_GPIO_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_USART2_UART_Init &rArr; _Error_Handler &rArr; Scope_create &rArr; MsgpackUnpacker_create &rArr; msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>MsgpackPacker_create</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, msgpackpacker.o(i.MsgpackPacker_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MsgpackPacker_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[160]"></a>MsgpackPacker_getIPacker</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgpackpacker.o(i.MsgpackPacker_getIPacker))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[14f]"></a>MsgpackUnpacker_create</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, msgpackunpacker.o(i.MsgpackUnpacker_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MsgpackUnpacker_create &rArr; msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[162]"></a>MsgpackUnpacker_getIUnpacker</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msgpackunpacker.o(i.MsgpackUnpacker_getIUnpacker))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>Receiver_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, receiver.o(i.Receiver_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Receiver_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[15d]"></a>Receiver_getIUnpacker</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, receiver.o(i.Receiver_getIUnpacker))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
</UL>

<P><STRONG><a name="[154]"></a>Receiver_unpack</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, receiver.o(i.Receiver_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Receiver_unpack &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_transmit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_flowControl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>Scope_announceAddresses</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scope.o(i.Scope_announceAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Scope_announceAddresses &rArr; Sender_addressAnnouncement
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_transmit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_addressAnnouncement
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iScopeAnnounce
</UL>

<P><STRONG><a name="[159]"></a>Scope_clear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scope.o(i.Scope_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scope_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iScopeClear
</UL>

<P><STRONG><a name="[15b]"></a>Scope_command</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, scope.o(i.Scope_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Scope_command &rArr; CommandFactory_getICommand &rArr; CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_unpack
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_getIUnpacker
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_getICommand
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_length
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive
</UL>

<P><STRONG><a name="[15e]"></a>Scope_create</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, scope.o(i.Scope_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Scope_create &rArr; MsgpackUnpacker_create &rArr; msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_getIUnpacker
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackUnpacker_getIUnpacker
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackUnpacker_create
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackPacker_getIPacker
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackPacker_create
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_getIComValidator
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_getIByteStream
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[163]"></a>Scope_getInputStream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.Scope_getInputStream))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_getIByteStream
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive
</UL>

<P><STRONG><a name="[164]"></a>Scope_poll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scope.o(i.Scope_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Scope_poll &rArr; Channel_poll &rArr; FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iScopePoll
</UL>

<P><STRONG><a name="[166]"></a>Scope_setAnnounceAddresses</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, scope.o(i.Scope_setAnnounceAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Scope_setAnnounceAddresses &rArr; AddressStorage_setAnnounceAddress &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_setAnnounceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>Scope_transmitData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scope.o(i.Scope_transmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Scope_transmitData &rArr; Sender_scopeData
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_release
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_transmit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>Sender_addressAnnouncement</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sender.o(i.Sender_addressAnnouncement))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sender_addressAnnouncement
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_getMaxAmountOfAddresses
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_getAddressToTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_announceAddresses
</UL>

<P><STRONG><a name="[161]"></a>Sender_create</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sender.o(i.Sender_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sender_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[155]"></a>Sender_flowControl</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sender.o(i.Sender_flowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sender_flowControl
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_unpack
</UL>

<P><STRONG><a name="[168]"></a>Sender_scopeData</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sender.o(i.Sender_scopeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sender_scopeData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_isTriggered
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_getTriggerIndex
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_getChannelId
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_isRunning
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_getRingBufferFloatStream
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_transmitData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iScopeTransmit
</UL>

<P><STRONG><a name="[156]"></a>Sender_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sender.o(i.Sender_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sender_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_transmitData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_announceAddresses
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_unpack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iScopeTransmit
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 240 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SystemClock_Config &rArr; _Error_Handler &rArr; Scope_create &rArr; MsgpackUnpacker_create &rArr; msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>Trigger_configure</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, trigger.o(i.Trigger_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Trigger_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[15f]"></a>Trigger_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, trigger.o(i.Trigger_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Trigger_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>

<P><STRONG><a name="[16e]"></a>Trigger_getChannelId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trigger.o(i.Trigger_getChannelId))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>

<P><STRONG><a name="[16f]"></a>Trigger_getTriggerIndex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trigger.o(i.Trigger_getTriggerIndex))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>

<P><STRONG><a name="[16d]"></a>Trigger_isTriggered</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trigger.o(i.Trigger_isTriggered))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>

<P><STRONG><a name="[169]"></a>Trigger_release</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, trigger.o(i.Trigger_release))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_transmitData
</UL>

<P><STRONG><a name="[165]"></a>Trigger_run</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, trigger.o(i.Trigger_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Trigger_run
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_poll
</UL>

<P><STRONG><a name="[140]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[141]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13f]"></a>UART_SetConfig</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[143]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[120]"></a>UartValidator_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartvalidator.o(i.UartValidator_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartValidator_create &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_getIComValidator
</UL>

<P><STRONG><a name="[121]"></a>UartValidator_getIComValidator</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartvalidator.o(i.UartValidator_getIComValidator))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_getIComValidator
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>_Error_Handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Error_Handler &rArr; Scope_create &rArr; MsgpackUnpacker_create &rArr; msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[176]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b1]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
</UL>

<P><STRONG><a name="[1d1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d2]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[f5]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_unpack
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_configure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_configure
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_destroy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_destroy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_new
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr_count
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[dc]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_unpack
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_create
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackUnpacker_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackPacker_create
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_create
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationFactory_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandFactory_create
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStream_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddressStorage_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartValidator_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetValidator_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrigger_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTriggerParser_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTrans_create
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTInc_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandTIncParser_create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunning_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandRunningParser_configure
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPoll_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandPollParser_create
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandClear_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAnnounce_create
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddr_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_create
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_configure
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatStream_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_chunk_list
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_new
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_malloc_expand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1d4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a1]"></a>__sync_add_and_fetch_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msgpackcommon.o(i.__sync_add_and_fetch_4))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_flush_zone
</UL>

<P><STRONG><a name="[186]"></a>__sync_sub_and_fetch_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msgpackcommon.o(i.__sync_sub_and_fetch_4))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr_count
</UL>

<P><STRONG><a name="[128]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[184]"></a>copyMemory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memory.o(i.copyMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCheck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBytesToCheck
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
</UL>

<P><STRONG><a name="[183]"></a>copyString</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, memory.o(i.copyString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = copyString &rArr; copyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfField
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfCommand
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareFlowControl
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; receive &rArr; Scope_command &rArr; CommandFactory_getICommand &rArr; CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_transmitData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_setAnnounceAddresses
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_poll
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_create
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_announceAddresses
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[193]"></a>msgpack_pack_object</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, objectc.o(i.msgpack_pack_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = msgpack_pack_object &rArr;  msgpack_pack_object (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_uint64
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_int64
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
</UL>

<P><STRONG><a name="[19a]"></a>msgpack_unpacker_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unpack.o(i.msgpack_unpacker_data))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
</UL>

<P><STRONG><a name="[19c]"></a>msgpack_unpacker_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, unpack.o(i.msgpack_unpacker_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msgpack_unpacker_destroy &rArr; msgpack_zone_free &rArr; msgpack_zone_destroy &rArr; call_finalizer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr_count
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[19d]"></a>msgpack_unpacker_execute</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, unpack.o(i.msgpack_unpacker_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = msgpack_unpacker_execute &rArr; template_execute &rArr; template_callback_map &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
</UL>

<P><STRONG><a name="[19f]"></a>msgpack_unpacker_flush_zone</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, unpack.o(i.msgpack_unpacker_flush_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = msgpack_unpacker_flush_zone &rArr; msgpack_zone_push_finalizer &rArr; msgpack_zone_push_finalizer_expand &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_add_and_fetch_4
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_push_finalizer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_release_zone
</UL>

<P><STRONG><a name="[150]"></a>msgpack_unpacker_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, unpack.o(i.msgpack_unpacker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msgpack_unpacker_init &rArr; msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_new
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackUnpacker_create
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[1a4]"></a>msgpack_unpacker_next</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, unpack.o(i.msgpack_unpacker_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = msgpack_unpacker_next &rArr; unpacker_next &rArr; msgpack_unpacker_execute &rArr; template_execute &rArr; template_callback_map &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_reset
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[1a7]"></a>msgpack_unpacker_release_zone</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unpack.o(i.msgpack_unpacker_release_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = msgpack_unpacker_release_zone &rArr; msgpack_unpacker_flush_zone &rArr; msgpack_zone_push_finalizer &rArr; msgpack_zone_push_finalizer_expand &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_new
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_flush_zone
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
</UL>

<P><STRONG><a name="[1a6]"></a>msgpack_unpacker_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, unpack.o(i.msgpack_unpacker_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msgpack_unpacker_reset &rArr; template_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_next
</UL>

<P><STRONG><a name="[1a8]"></a>msgpack_zone_destroy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zone.o(i.msgpack_zone_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = msgpack_zone_destroy &rArr; call_finalizer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_finalizer_array
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_free
</UL>

<P><STRONG><a name="[199]"></a>msgpack_zone_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zone.o(i.msgpack_zone_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msgpack_zone_free &rArr; msgpack_zone_destroy &rArr; call_finalizer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_destroy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacked_destroy
</UL>

<P><STRONG><a name="[1ab]"></a>msgpack_zone_malloc_expand</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, zone.o(i.msgpack_zone_malloc_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_malloc
</UL>

<P><STRONG><a name="[1a2]"></a>msgpack_zone_new</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, zone.o(i.msgpack_zone_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = msgpack_zone_new &rArr; init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_chunk_list
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_release_zone
</UL>

<P><STRONG><a name="[1ac]"></a>msgpack_zone_push_finalizer_expand</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, zone.o(i.msgpack_zone_push_finalizer_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msgpack_zone_push_finalizer_expand &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_push_finalizer
</UL>

<P><STRONG><a name="[9e]"></a>prepareAddressAnnouncement</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msgpackpacker.o(i.prepareAddressAnnouncement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepareAddressAnnouncement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementPayloadField
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[bf]"></a>printHandle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.printHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = printHandle &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[197]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_sbuffer_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_sbuffer_write
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_push_finalizer_expand
</UL>

<P><STRONG><a name="[190]"></a>receive</STRONG> (Thumb, 58 bytes, Stack size 208 bytes, main.o(i.receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = receive &rArr; Scope_command &rArr; CommandFactory_getICommand &rArr; CommandAddrParser_configure &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_getInputStream
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_command
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[133]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[134]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[130]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b2]"></a>getTimeIncrement</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.getTimeIncrement))
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b3]"></a>getTimestamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scope.o(i.getTimestamp))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_getIntStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b5]"></a>iScopeAnnounce</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.iScopeAnnounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iScopeAnnounce &rArr; Scope_announceAddresses &rArr; Sender_addressAnnouncement
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_announceAddresses
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b6]"></a>iScopeClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.iScopeClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iScopeClear &rArr; Scope_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[af]"></a>iScopePoll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.iScopePoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iScopePoll &rArr; Scope_poll &rArr; Channel_poll &rArr; FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scope_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b1]"></a>iScopeSetTimeIncrement</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scope.o(i.iScopeSetTimeIncrement))
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b0]"></a>iScopeTransmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scope.o(i.iScopeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iScopeTransmit &rArr; Sender_scopeData
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_transmit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender_scopeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[b4]"></a>transmitTimestampInc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scope.o(i.transmitTimestampInc))
<BR>[Address Reference Count : 1]<UL><LI> scope.o(i.Scope_create)
</UL>
<P><STRONG><a name="[8b]"></a>closeStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, floatringbuffer.o(i.closeStream))
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[85]"></a>dataIsReady</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, floatringbuffer.o(i.dataIsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dataIsReady
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[8c]"></a>flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, floatringbuffer.o(i.flush))
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[126]"></a>nextIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, floatringbuffer.o(i.nextIndex))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_read
</UL>

<P><STRONG><a name="[84]"></a>openStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, floatringbuffer.o(i.openStream))
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[88]"></a>readAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, floatringbuffer.o(i.readAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readAll &rArr; FloatRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[86]"></a>readData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, floatringbuffer.o(i.readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readData &rArr; FloatRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[87]"></a>streamLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, floatringbuffer.o(i.streamLength))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[8a]"></a>writeAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, floatringbuffer.o(i.writeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeAll &rArr; FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[89]"></a>writeData</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, floatringbuffer.o(i.writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeData &rArr; FloatRingBuffer_write &rArr; FloatRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floatringbuffer.o(i.FloatRingBuffer_create)
</UL>
<P><STRONG><a name="[94]"></a>closeStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, intringbuffer.o(i.closeStream))
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[8e]"></a>dataIsReady</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, intringbuffer.o(i.dataIsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dataIsReady
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[95]"></a>flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intringbuffer.o(i.flush))
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[149]"></a>nextIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, intringbuffer.o(i.nextIndex))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_read
</UL>

<P><STRONG><a name="[8d]"></a>openStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, intringbuffer.o(i.openStream))
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[91]"></a>readAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intringbuffer.o(i.readAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readAll &rArr; IntRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[8f]"></a>readData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, intringbuffer.o(i.readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readData &rArr; IntRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[90]"></a>streamLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intringbuffer.o(i.streamLength))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[93]"></a>writeAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intringbuffer.o(i.writeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeAll &rArr; IntRingBuffer_write &rArr; IntRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[92]"></a>writeData</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, intringbuffer.o(i.writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeData &rArr; IntRingBuffer_write &rArr; IntRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intringbuffer.o(i.IntRingBuffer_create)
</UL>
<P><STRONG><a name="[17f]"></a>constructBase</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, msgpackpacker.o(i.constructBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = constructBase &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_map
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[9d]"></a>getByteStream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgpackpacker.o(i.getByteStream))
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[1b5]"></a>incrementPayloadField</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, msgpackpacker.o(i.incrementPayloadField))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareAddressAnnouncement
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareTrigger
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareTimestamp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareTimeIncrement
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareChannel
</UL>

<P><STRONG><a name="[1ae]"></a>msgpack_pack_array</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msgpackpacker.o(i.msgpack_pack_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgpack_pack_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
</UL>

<P><STRONG><a name="[180]"></a>msgpack_pack_map</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msgpackpacker.o(i.msgpack_pack_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgpack_pack_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
</UL>

<P><STRONG><a name="[181]"></a>msgpack_pack_str</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, msgpackpacker.o(i.msgpack_pack_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgpack_pack_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFlowControl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
</UL>

<P><STRONG><a name="[182]"></a>msgpack_pack_str_body</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, msgpackpacker.o(i.msgpack_pack_str_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msgpack_pack_str_body
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFlowControl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
</UL>

<P><STRONG><a name="[1af]"></a>msgpack_pack_uint32</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, msgpackpacker.o(i.msgpack_pack_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msgpack_pack_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
</UL>

<P><STRONG><a name="[9f]"></a>msgpack_sbuffer_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, msgpackpacker.o(i.msgpack_sbuffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msgpack_sbuffer_write &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[1ad]"></a>packAddresses</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, msgpackpacker.o(i.packAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = packAddresses &rArr; msgpack_pack_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_uint32
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_map
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_array
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[1b0]"></a>packChannel</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, msgpackpacker.o(i.packChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = packChannel &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_map
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_array
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[96]"></a>packData</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, msgpackpacker.o(i.packData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = packData &rArr; packChannel &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTrigger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packTimestamp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFlowControl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packAddresses
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_uint32
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_map
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructBase
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[1b2]"></a>packFlowControl</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msgpackpacker.o(i.packFlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = packFlowControl &rArr; msgpack_pack_str
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[1b3]"></a>packTimestamp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msgpackpacker.o(i.packTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = packTimestamp &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_uint32
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_array
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[1b4]"></a>packTrigger</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, msgpackpacker.o(i.packTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = packTrigger &rArr; msgpack_pack_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_uint32
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str_body
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_str
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_map
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packData
</UL>

<P><STRONG><a name="[98]"></a>prepareChannel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, msgpackpacker.o(i.prepareChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepareChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementPayloadField
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[99]"></a>prepareFlowControl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msgpackpacker.o(i.prepareFlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prepareFlowControl &rArr; copyString &rArr; copyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[9a]"></a>prepareTimeIncrement</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msgpackpacker.o(i.prepareTimeIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepareTimeIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementPayloadField
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[9b]"></a>prepareTimestamp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msgpackpacker.o(i.prepareTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepareTimestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementPayloadField
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[9c]"></a>prepareTrigger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, msgpackpacker.o(i.prepareTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepareTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementPayloadField
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[97]"></a>reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, msgpackpacker.o(i.reset))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgpackPacker_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackpacker.o(i.MsgpackPacker_create)
</UL>
<P><STRONG><a name="[a9]"></a>activateNewMessage</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, msgpackunpacker.o(i.activateNewMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = activateNewMessage &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[187]"></a>getArrayObject</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, msgpackunpacker.o(i.getArrayObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getArrayObject
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBoolFromCommand
</UL>

<P><STRONG><a name="[a1]"></a>getBoolFromCommand</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, msgpackunpacker.o(i.getBoolFromCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = getBoolFromCommand &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayObject
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[ad]"></a>getBytesToCheck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgpackunpacker.o(i.getBytesToCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getBytesToCheck &rArr; copyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[ac]"></a>getCheck</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, msgpackunpacker.o(i.getCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getCheck &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[188]"></a>getCmdObj</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, msgpackunpacker.o(i.getCmdObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumberOfFields
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfField
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBoolFromCommand
</UL>

<P><STRONG><a name="[17e]"></a>getCommandMap</STRONG> (Thumb, 110 bytes, Stack size 96 bytes, msgpackunpacker.o(i.getCommandMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messageSeemsValid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateNewMessage
</UL>

<P><STRONG><a name="[18a]"></a>getFieldFromCommand</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, msgpackunpacker.o(i.getFieldFromCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getFieldFromCommand &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBoolFromCommand
</UL>

<P><STRONG><a name="[a2]"></a>getFloatFromCommand</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, msgpackunpacker.o(i.getFloatFromCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = getFloatFromCommand &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayObject
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a3]"></a>getIntFromCommand</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, msgpackunpacker.o(i.getIntFromCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = getIntFromCommand &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayObject
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[aa]"></a>getLengthOfBytesToCheck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msgpackunpacker.o(i.getLengthOfBytesToCheck))
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[ab]"></a>getLengthOfCheck</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, msgpackunpacker.o(i.getLengthOfCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = getLengthOfCheck &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a5]"></a>getNameOfCommand</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, msgpackunpacker.o(i.getNameOfCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = getNameOfCommand &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a8]"></a>getNameOfField</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, msgpackunpacker.o(i.getNameOfField))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = getNameOfField &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a6]"></a>getNumberOfCommands</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msgpackunpacker.o(i.getNumberOfCommands))
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a7]"></a>getNumberOfFields</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, msgpackunpacker.o(i.getNumberOfFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = getNumberOfFields &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a4]"></a>getStringFromCommand</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, msgpackunpacker.o(i.getStringFromCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = getStringFromCommand &rArr; getCmdObj &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpackObjIsMap
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayObject
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[18c]"></a>matchKeyToIndex</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, msgpackunpacker.o(i.matchKeyToIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToObj
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFieldFromCommand
</UL>

<P><STRONG><a name="[18b]"></a>matchKeyToObj</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, msgpackunpacker.o(i.matchKeyToObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchKeyToIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthOfCheck
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdObj
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCheck
</UL>

<P><STRONG><a name="[192]"></a>messageSeemsValid</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, msgpackunpacker.o(i.messageSeemsValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = messageSeemsValid &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[189]"></a>msgpackObjIsMap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgpackunpacker.o(i.msgpackObjIsMap))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringFromCommand
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumberOfFields
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNameOfField
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloatFromCommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBoolFromCommand
</UL>

<P><STRONG><a name="[ae]"></a>msgpack_sbuffer_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, msgpackunpacker.o(i.msgpack_sbuffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msgpack_sbuffer_write &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[a0]"></a>unpack</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, msgpackunpacker.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = unpack &rArr; messageSeemsValid &rArr; getCommandMap &rArr; matchKeyToObj &rArr; matchKeyToIndex &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messageSeemsValid
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommandMap
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_next
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_destroy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgpackunpacker.o(i.MsgpackUnpacker_create)
</UL>
<P><STRONG><a name="[1bd]"></a>checkCurrentData</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, trigger.o(i.checkCurrentData))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerNormal
</UL>

<P><STRONG><a name="[b7]"></a>triggerContinuous</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trigger.o(i.triggerContinuous))
<BR>[Address Reference Count : 1]<UL><LI> trigger.o(i.Trigger_create)
</UL>
<P><STRONG><a name="[b8]"></a>triggerNormal</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, trigger.o(i.triggerNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = triggerNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCurrentData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trigger.o(i.Trigger_create)
</UL>
<P><STRONG><a name="[b9]"></a>triggerOneShot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trigger.o(i.triggerOneShot))
<BR>[Address Reference Count : 1]<UL><LI> trigger.o(i.Trigger_create)
</UL>
<P><STRONG><a name="[6a]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandaddr.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandaddr.o(i.CommandAddr_create)
</UL>
<P><STRONG><a name="[68]"></a>run</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, commandaddr.o(i.run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_setPollAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandaddr.o(i.CommandAddr_create)
</UL>
<P><STRONG><a name="[69]"></a>setCommandAttribute</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, commandaddr.o(i.setCommandAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setCommandAttribute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandaddr.o(i.CommandAddr_create)
</UL>
<P><STRONG><a name="[f4]"></a>parseStringToDataType</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, commandaddrparser.o(i.parseStringToDataType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = parseStringToDataType &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandAddrParser_configure
</UL>

<P><STRONG><a name="[6d]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandannounce.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandannounce.o(i.CommandAnnounce_create)
</UL>
<P><STRONG><a name="[6b]"></a>run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandannounce.o(i.run))
<BR>[Address Reference Count : 1]<UL><LI> commandannounce.o(i.CommandAnnounce_create)
</UL>
<P><STRONG><a name="[6c]"></a>setCommandAttribute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandannounce.o(i.setCommandAttribute))
<BR>[Address Reference Count : 1]<UL><LI> commandannounce.o(i.CommandAnnounce_create)
</UL>
<P><STRONG><a name="[70]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandclear.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandclear.o(i.CommandClear_create)
</UL>
<P><STRONG><a name="[6e]"></a>run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandclear.o(i.run))
<BR>[Address Reference Count : 1]<UL><LI> commandclear.o(i.CommandClear_create)
</UL>
<P><STRONG><a name="[6f]"></a>setCommandAttribute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandclear.o(i.setCommandAttribute))
<BR>[Address Reference Count : 1]<UL><LI> commandclear.o(i.CommandClear_create)
</UL>
<P><STRONG><a name="[73]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandpoll.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandpoll.o(i.CommandPoll_create)
</UL>
<P><STRONG><a name="[71]"></a>run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commandpoll.o(i.run))
<BR>[Address Reference Count : 1]<UL><LI> commandpoll.o(i.CommandPoll_create)
</UL>
<P><STRONG><a name="[72]"></a>setCommandAttribute</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandpoll.o(i.setCommandAttribute))
<BR>[Address Reference Count : 1]<UL><LI> commandpoll.o(i.CommandPoll_create)
</UL>
<P><STRONG><a name="[76]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandrunning.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandrunning.o(i.CommandRunning_create)
</UL>
<P><STRONG><a name="[74]"></a>run</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, commandrunning.o(i.run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_setStateStopped
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_setStateRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandrunning.o(i.CommandRunning_create)
</UL>
<P><STRONG><a name="[75]"></a>setCommandAttribute</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, commandrunning.o(i.setCommandAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setCommandAttribute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandrunning.o(i.CommandRunning_create)
</UL>
<P><STRONG><a name="[79]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtinc.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandtinc.o(i.CommandTInc_create)
</UL>
<P><STRONG><a name="[77]"></a>run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commandtinc.o(i.run))
<BR>[Address Reference Count : 1]<UL><LI> commandtinc.o(i.CommandTInc_create)
</UL>
<P><STRONG><a name="[78]"></a>setCommandAttribute</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandtinc.o(i.setCommandAttribute))
<BR>[Address Reference Count : 1]<UL><LI> commandtinc.o(i.CommandTInc_create)
</UL>
<P><STRONG><a name="[7c]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtrans.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandtrans.o(i.CommandTrans_create)
</UL>
<P><STRONG><a name="[7a]"></a>run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandtrans.o(i.run))
<BR>[Address Reference Count : 1]<UL><LI> commandtrans.o(i.CommandTrans_create)
</UL>
<P><STRONG><a name="[7b]"></a>setCommandAttribute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, commandtrans.o(i.setCommandAttribute))
<BR>[Address Reference Count : 1]<UL><LI> commandtrans.o(i.CommandTrans_create)
</UL>
<P><STRONG><a name="[7f]"></a>getCommandName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandtrigger.o(i.getCommandName))
<BR>[Address Reference Count : 1]<UL><LI> commandtrigger.o(i.CommandTrigger_create)
</UL>
<P><STRONG><a name="[7d]"></a>run</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, commandtrigger.o(i.run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = run &rArr; Trigger_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_configure
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandtrigger.o(i.CommandTrigger_create)
</UL>
<P><STRONG><a name="[7e]"></a>setCommandAttribute</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, commandtrigger.o(i.setCommandAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setCommandAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandtrigger.o(i.CommandTrigger_create)
</UL>
<P><STRONG><a name="[80]"></a>checkPresentInProtocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetvalidator.o(i.checkPresentInProtocol))
<BR>[Address Reference Count : 1]<UL><LI> ethernetvalidator.o(i.EthernetValidator_create)
</UL>
<P><STRONG><a name="[81]"></a>createCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernetvalidator.o(i.createCheck))
<BR>[Address Reference Count : 1]<UL><LI> ethernetvalidator.o(i.EthernetValidator_create)
</UL>
<P><STRONG><a name="[82]"></a>getCheckLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetvalidator.o(i.getCheckLength))
<BR>[Address Reference Count : 1]<UL><LI> ethernetvalidator.o(i.EthernetValidator_create)
</UL>
<P><STRONG><a name="[83]"></a>validateCheck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetvalidator.o(i.validateCheck))
<BR>[Address Reference Count : 1]<UL><LI> ethernetvalidator.o(i.EthernetValidator_create)
</UL>
<P><STRONG><a name="[ba]"></a>checkPresentInProtocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartvalidator.o(i.checkPresentInProtocol))
<BR>[Address Reference Count : 1]<UL><LI> uartvalidator.o(i.UartValidator_create)
</UL>
<P><STRONG><a name="[bb]"></a>createCheck</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartvalidator.o(i.createCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = createCheck &rArr; generate
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartvalidator.o(i.UartValidator_create)
</UL>
<P><STRONG><a name="[185]"></a>generate</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, uartvalidator.o(i.generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = generate
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateCheck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createCheck
</UL>

<P><STRONG><a name="[bc]"></a>getCheckLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartvalidator.o(i.getCheckLength))
<BR>[Address Reference Count : 1]<UL><LI> uartvalidator.o(i.UartValidator_create)
</UL>
<P><STRONG><a name="[bd]"></a>validateCheck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uartvalidator.o(i.validateCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = validateCheck &rArr; generate
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartvalidator.o(i.UartValidator_create)
</UL>
<P><STRONG><a name="[66]"></a>closeStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, byteringbuffer.o(i.closeStream))
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[60]"></a>dataIsReady</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, byteringbuffer.o(i.dataIsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dataIsReady
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[67]"></a>flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, byteringbuffer.o(i.flush))
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[e4]"></a>nextIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, byteringbuffer.o(i.nextIndex))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_read
</UL>

<P><STRONG><a name="[5f]"></a>openStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, byteringbuffer.o(i.openStream))
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[63]"></a>readAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, byteringbuffer.o(i.readAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readAll &rArr; ByteRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[61]"></a>readData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, byteringbuffer.o(i.readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readData &rArr; ByteRingBuffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[62]"></a>streamLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, byteringbuffer.o(i.streamLength))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_usedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[65]"></a>writeAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, byteringbuffer.o(i.writeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeAll &rArr; ByteRingBuffer_write &rArr; ByteRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[64]"></a>writeData</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, byteringbuffer.o(i.writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeData &rArr; ByteRingBuffer_write &rArr; ByteRingBuffer_freeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRingBuffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> byteringbuffer.o(i.ByteRingBuffer_create)
</UL>
<P><STRONG><a name="[196]"></a>msgpack_pack_ext</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, objectc.o(i.msgpack_pack_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgpack_pack_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
</UL>

<P><STRONG><a name="[195]"></a>msgpack_pack_int64</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, objectc.o(i.msgpack_pack_int64))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = msgpack_pack_int64
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
</UL>

<P><STRONG><a name="[194]"></a>msgpack_pack_uint64</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, objectc.o(i.msgpack_pack_uint64))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = msgpack_pack_uint64
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_pack_object
</UL>

<P><STRONG><a name="[c0]"></a>decr_count</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, unpack.o(i.decr_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = decr_count &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sync_sub_and_fetch_4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unpack.o(i.msgpack_unpacker_flush_zone)
</UL>
<P><STRONG><a name="[198]"></a>msgpack_unpacked_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, unpack.o(i.msgpack_unpacked_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msgpack_unpacked_destroy &rArr; msgpack_zone_free &rArr; msgpack_zone_destroy &rArr; call_finalizer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpacker_next
</UL>

<P><STRONG><a name="[1aa]"></a>msgpack_zone_malloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, unpack.o(i.msgpack_zone_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_malloc_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_callback_map
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_callback_array
</UL>

<P><STRONG><a name="[1a0]"></a>msgpack_zone_push_finalizer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unpack.o(i.msgpack_zone_push_finalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = msgpack_zone_push_finalizer &rArr; msgpack_zone_push_finalizer_expand &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_push_finalizer_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_flush_zone
</UL>

<P><STRONG><a name="[1b9]"></a>template_callback_array</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, unpack.o(i.template_callback_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = template_callback_array &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
</UL>

<P><STRONG><a name="[1bc]"></a>template_callback_int8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, unpack.o(i.template_callback_int8))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
</UL>

<P><STRONG><a name="[1ba]"></a>template_callback_map</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, unpack.o(i.template_callback_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = template_callback_map &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_execute
</UL>

<P><STRONG><a name="[19b]"></a>template_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, unpack.o(i.template_data))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_data
</UL>

<P><STRONG><a name="[19e]"></a>template_execute</STRONG> (Thumb, 2012 bytes, Stack size 144 bytes, unpack.o(i.template_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = template_execute &rArr; template_callback_map &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_callback_map
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_callback_int8
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_callback_array
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_execute
</UL>

<P><STRONG><a name="[1a3]"></a>template_init</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, unpack.o(i.template_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = template_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_reset
</UL>

<P><STRONG><a name="[1a5]"></a>unpacker_next</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, unpack.o(i.unpacker_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = unpacker_next &rArr; msgpack_unpacker_execute &rArr; template_execute &rArr; template_callback_map &rArr; msgpack_zone_malloc &rArr; msgpack_zone_malloc_expand &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_release_zone
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_data
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacked_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_unpacker_next
</UL>

<P><STRONG><a name="[1a9]"></a>call_finalizer_array</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, zone.o(i.call_finalizer_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = call_finalizer_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_destroy
</UL>

<P><STRONG><a name="[18e]"></a>init_chunk_list</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, zone.o(i.init_chunk_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_chunk_list &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgpack_zone_new
</UL>

<P><STRONG><a name="[179]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[177]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[17c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[178]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
